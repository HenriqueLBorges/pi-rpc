/**
 * Generated by Scrooge
 *   version: 19.5.0
 *   rev: e4dcc42ba660bdf59f3049d98cca03a3e043a348
 *   built at: 20190517-122041
 */
package com.pi.thrift

import com.twitter.scrooge._
import com.twitter.finagle.{
  service => ctfs,
  Filter => finagle$Filter,
  Service => finagle$Service,
  thrift => _,
  _
}
import com.twitter.finagle.stats.{Counter, StatsReceiver}
import com.twitter.finagle.thrift.{
  Protocols,
  RichClientParam,
  RichServerParam,
  ServerToReqRep,
  ThriftClientRequest,
  ToThriftService
}
import com.twitter.util.{Future, Return, Throw, Throwables}
import com.twitter.io.Buf
import org.apache.thrift.protocol._
import org.apache.thrift.TApplicationException
import scala.collection.mutable.Builder
import scala.collection.immutable.{Map => immutable$Map, Set => immutable$Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait PiService[+MM[_]] extends _root_.com.twitter.finagle.thrift.ThriftService {
  
  def getNumber(): MM[Long]
  
  def submitNumber(result: String): MM[Unit]
  
  def getPI(): MM[String]

  /**
   * Used to close the underlying `Service`.
   * Not a user-defined API.
   */
  def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
}


object PiService extends _root_.com.twitter.finagle.thrift.GeneratedThriftService { self =>

  val annotations: immutable$Map[String, String] = immutable$Map.empty

  val methods: immutable$Set[ThriftMethod] = immutable$Set(
    self.GetNumber,
    self.SubmitNumber,
    self.GetPI
  )

  trait ServicePerEndpoint
    extends ToThriftService
    with _root_.com.twitter.finagle.thrift.service.Filterable[ServicePerEndpoint] {
    def getNumber : _root_.com.twitter.finagle.Service[self.GetNumber.Args, self.GetNumber.SuccessType]
    def submitNumber : _root_.com.twitter.finagle.Service[self.SubmitNumber.Args, self.SubmitNumber.SuccessType]
    def getPI : _root_.com.twitter.finagle.Service[self.GetPI.Args, self.GetPI.SuccessType]

    def withGetNumber(getNumber : _root_.com.twitter.finagle.Service[self.GetNumber.Args, self.GetNumber.SuccessType]): ServicePerEndpoint = this

    def withSubmitNumber(submitNumber : _root_.com.twitter.finagle.Service[self.SubmitNumber.Args, self.SubmitNumber.SuccessType]): ServicePerEndpoint = this

    def withGetPI(getPI : _root_.com.twitter.finagle.Service[self.GetPI.Args, self.GetPI.SuccessType]): ServicePerEndpoint = this

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint =
      ServicePerEndpoint.apply(getNumber, submitNumber, getPI).filtered(filter)

    /**
     * Converts the `ServicePerEndpoint` to a `GeneratedThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = MethodPerEndpoint(this)

    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
  }

  trait ReqRepServicePerEndpoint
    extends ToThriftService
    with _root_.com.twitter.finagle.thrift.service.Filterable[ReqRepServicePerEndpoint] {
    def getNumber : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetNumber.Args], _root_.com.twitter.scrooge.Response[self.GetNumber.SuccessType]]
    def submitNumber : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.SubmitNumber.Args], _root_.com.twitter.scrooge.Response[self.SubmitNumber.SuccessType]]
    def getPI : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetPI.Args], _root_.com.twitter.scrooge.Response[self.GetPI.SuccessType]]

    def withGetNumber(getNumber : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetNumber.Args], _root_.com.twitter.scrooge.Response[self.GetNumber.SuccessType]]): ReqRepServicePerEndpoint = this

    def withSubmitNumber(submitNumber : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.SubmitNumber.Args], _root_.com.twitter.scrooge.Response[self.SubmitNumber.SuccessType]]): ReqRepServicePerEndpoint = this

    def withGetPI(getPI : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetPI.Args], _root_.com.twitter.scrooge.Response[self.GetPI.SuccessType]]): ReqRepServicePerEndpoint = this

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServicePerEndpoint` now including the filter.
     */
    def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint =
      ReqRepServicePerEndpoint.apply(getNumber, submitNumber, getPI).filtered(filter)

    /**
     * Converts the `ServicePerEndpoint` to a `GeneratedThriftService`.
     * @see _root_.com.twitter.scrooge.ToThriftService
     */
    def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = ReqRepMethodPerEndpoint(this)

    /**
     * Used to close the underlying `Service`.
     * Not a user-defined API.
     */
    def asClosable: _root_.com.twitter.util.Closable = _root_.com.twitter.util.Closable.nop
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  trait BaseServiceIface extends ToThriftService {
    def getNumber : com.twitter.finagle.Service[self.GetNumber.Args, self.GetNumber.SuccessType]
    def submitNumber : com.twitter.finagle.Service[self.SubmitNumber.Args, self.SubmitNumber.SuccessType]
    def getPI : com.twitter.finagle.Service[self.GetPI.Args, self.GetPI.SuccessType]

    def toThriftService: _root_.com.twitter.finagle.thrift.ThriftService = new MethodIface(this)
  }

  object ServicePerEndpoint {

    def apply(
      getNumber : _root_.com.twitter.finagle.Service[self.GetNumber.Args, self.GetNumber.SuccessType],
      submitNumber : _root_.com.twitter.finagle.Service[self.SubmitNumber.Args, self.SubmitNumber.SuccessType],
      getPI : _root_.com.twitter.finagle.Service[self.GetPI.Args, self.GetPI.SuccessType]
    ): ServicePerEndpoint = new ServicePerEndpointImpl(getNumber, submitNumber, getPI)

    private final class ServicePerEndpointImpl(
      override val getNumber : _root_.com.twitter.finagle.Service[self.GetNumber.Args, self.GetNumber.SuccessType],
      override val submitNumber : _root_.com.twitter.finagle.Service[self.SubmitNumber.Args, self.SubmitNumber.SuccessType],
      override val getPI : _root_.com.twitter.finagle.Service[self.GetPI.Args, self.GetPI.SuccessType]
    ) extends ServicePerEndpoint {

      override def withGetNumber(
        getNumber : _root_.com.twitter.finagle.Service[self.GetNumber.Args, self.GetNumber.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(getNumber, submitNumber, getPI)

      override def withSubmitNumber(
        submitNumber : _root_.com.twitter.finagle.Service[self.SubmitNumber.Args, self.SubmitNumber.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(getNumber, submitNumber, getPI)

      override def withGetPI(
        getPI : _root_.com.twitter.finagle.Service[self.GetPI.Args, self.GetPI.SuccessType]
      ): ServicePerEndpoint =
        new ServicePerEndpointImpl(getNumber, submitNumber, getPI)

      override def filtered(filter: _root_.com.twitter.finagle.Filter.TypeAgnostic): ServicePerEndpoint =
        new ServicePerEndpointImpl(
          getNumber = filter.toFilter.andThen(getNumber),
          submitNumber = filter.toFilter.andThen(submitNumber),
          getPI = filter.toFilter.andThen(getPI)
        )

      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
          this.getNumber,
          this.submitNumber,
          this.getPI
        )
    }
  }

  object ReqRepServicePerEndpoint {

    def apply(
      getNumber :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.GetNumber.Args], _root_.com.twitter.scrooge.Response[self.GetNumber.SuccessType]],
      submitNumber :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.SubmitNumber.Args], _root_.com.twitter.scrooge.Response[self.SubmitNumber.SuccessType]],
      getPI :  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.GetPI.Args], _root_.com.twitter.scrooge.Response[self.GetPI.SuccessType]]
    ): ReqRepServicePerEndpoint =
      new ReqRepServicePerEndpointImpl(getNumber, submitNumber, getPI)

    private final class ReqRepServicePerEndpointImpl(
      override val getNumber : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.GetNumber.Args], _root_.com.twitter.scrooge.Response[self.GetNumber.SuccessType]],
      override val submitNumber : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.SubmitNumber.Args], _root_.com.twitter.scrooge.Response[self.SubmitNumber.SuccessType]],
      override val getPI : _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[self.GetPI.Args], _root_.com.twitter.scrooge.Response[self.GetPI.SuccessType]]
    ) extends ReqRepServicePerEndpoint {

      override def withGetNumber(
        getNumber : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetNumber.Args], _root_.com.twitter.scrooge.Response[self.GetNumber.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(getNumber, submitNumber, getPI)
      override def withSubmitNumber(
        submitNumber : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.SubmitNumber.Args], _root_.com.twitter.scrooge.Response[self.SubmitNumber.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(getNumber, submitNumber, getPI)
      override def withGetPI(
        getPI : _root_.com.twitter.finagle.Service[com.twitter.scrooge.Request[self.GetPI.Args], _root_.com.twitter.scrooge.Response[self.GetPI.SuccessType]]
      ): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(getNumber, submitNumber, getPI)

      override def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ReqRepServicePerEndpoint =
        new ReqRepServicePerEndpointImpl(
          getNumber = filter.toFilter.andThen(getNumber),
          submitNumber = filter.toFilter.andThen(submitNumber),
          getPI = filter.toFilter.andThen(getPI)
        )

      override def asClosable: _root_.com.twitter.util.Closable =
        _root_.com.twitter.util.Closable.all(
          this.getNumber,
          this.submitNumber,
          this.getPI
        )
    }
  }

  def unsafeBuildFromMethods(methods: immutable$Map[ThriftMethod,  _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[_], _root_.com.twitter.scrooge.Response[_]]]): ReqRepServicePerEndpoint = {
    val getNumber = methods.get(self.GetNumber) match {
      case Some(impl) => impl.asInstanceOf[self.GetNumber.ReqRepServicePerEndpointServiceType]
      case _ => throw new IllegalArgumentException(s"No implementation found for method GetNumber in ${methods.keySet}")
    }
    val submitNumber = methods.get(self.SubmitNumber) match {
      case Some(impl) => impl.asInstanceOf[self.SubmitNumber.ReqRepServicePerEndpointServiceType]
      case _ => throw new IllegalArgumentException(s"No implementation found for method SubmitNumber in ${methods.keySet}")
    }
    val getPI = methods.get(self.GetPI) match {
      case Some(impl) => impl.asInstanceOf[self.GetPI.ReqRepServicePerEndpointServiceType]
      case _ => throw new IllegalArgumentException(s"No implementation found for method GetPI in ${methods.keySet}")
    }

    ReqRepServicePerEndpoint(getNumber, submitNumber, getPI)
  }

  @deprecated("Use ServicePerEndpoint", "2017-11-07")
  case class ServiceIface(
    getNumber : com.twitter.finagle.Service[self.GetNumber.Args, self.GetNumber.SuccessType],
    submitNumber : com.twitter.finagle.Service[self.SubmitNumber.Args, self.SubmitNumber.SuccessType],
    getPI : com.twitter.finagle.Service[self.GetPI.Args, self.GetPI.SuccessType]
  ) extends BaseServiceIface
    with _root_.com.twitter.finagle.thrift.service.Filterable[ServiceIface] {

    /**
     * Prepends the given type-agnostic `Filter` to all of the `Services`
     * and returns a copy of the `ServiceIface` now including the filter.
     */
    def filtered(filter: com.twitter.finagle.Filter.TypeAgnostic): ServiceIface =
      copy(
        getNumber = filter.toFilter.andThen(getNumber),
        submitNumber = filter.toFilter.andThen(submitNumber),
        getPI = filter.toFilter.andThen(getPI)
      )
  }

  implicit object ServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ServicePerEndpointBuilder[ServicePerEndpoint] {
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServicePerEndpoint =
        ServicePerEndpoint(
          getNumber = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.GetNumber,
            thriftService,
            clientParam
          ),
          submitNumber = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.SubmitNumber,
            thriftService,
            clientParam
          ),
          getPI = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.GetPI,
            thriftService,
            clientParam
          )
        )
  }

  implicit object ReqRepServicePerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepServicePerEndpointBuilder[ReqRepServicePerEndpoint] {
      def servicePerEndpoint(
        thriftService: _root_.com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ReqRepServicePerEndpoint =
        ReqRepServicePerEndpoint(
          getNumber = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.GetNumber, thriftService, clientParam),
          submitNumber = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.SubmitNumber, thriftService, clientParam),
          getPI = _root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint(self.GetPI, thriftService, clientParam)
        )
  }

  @deprecated("Use ServicePerEndpointBuilder", "2017-11-07")
  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        clientParam: RichClientParam
      ): ServiceIface =
        ServiceIface(
          getNumber = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.GetNumber,
            binaryService,
            clientParam
          ),
          submitNumber = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.SubmitNumber,
            binaryService,
            clientParam
          ),
          getPI = _root_.com.twitter.finagle.thrift.service.ThriftServicePerEndpoint(
            self.GetPI,
            binaryService,
            clientParam
          )
        )
  }

  object GetNumber extends ThriftMethod {
    
    object Args extends ValidatingThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("getNumber_args")
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Args): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf.toList
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
      ): Args =
        new Args(
        )
    
      def unapply(_item: Args): Boolean = true
    
    
    
    }
    
    class Args(
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product
      with ValidatingThriftStruct[Args]
      with java.io.Serializable
    {
      import Args._
    
      def this(
      ) = this(
        Map.empty
      )
    
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 0
    
      override def productElement(n: Int): Any = n match {
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ValidatingThriftStructCodec3[Args] = Args
    }

    type SuccessType = Long
    
    object Result extends ValidatingThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("getNumber_result")
      val SuccessField: TField = new TField("success", TType.I64, 0)
      val SuccessFieldManifest: Manifest[Long] = implicitly[Manifest[Long]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Result): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.success)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[Long] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.I64 =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[Long] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[Long]] = _root_.scala.Some(_item.success)
    
    
      @inline private[thrift] def readSuccessValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeSuccessField(success_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(success_item)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[Long],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Long] with ThriftStruct
      with _root_.scala.Product1[Option[Long]]
      with ValidatingThriftStruct[Result]
      with java.io.Serializable
    {
      import Result._
    
      def this(
        success: _root_.scala.Option[Long] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1: _root_.scala.Option[Long] = success
    
      def successField: Option[Long] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[Long] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ValidatingThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[Long]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[Long]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }


    val name: String = "getNumber"
    val serviceName: String = "PiService"
    val argsCodec: Args.type = Args
    val responseCodec: Result.type = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val getNumber$args: GetNumber.Args.type = GetNumber.Args
  type getNumber$args = GetNumber.Args

  val getNumber$result: GetNumber.Result.type = GetNumber.Result
  type getNumber$result = GetNumber.Result

  object SubmitNumber extends ThriftMethod {
    
    object Args extends ValidatingThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("submitNumber_args")
      val ResultField: TField = new TField("result", TType.STRING, -1)
      val ResultFieldManifest: Manifest[String] = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          ResultField,
          false,
          false,
          ResultFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Args): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.result)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          result =
            {
              val field = original.result
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var result: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case -1 =>
                _field.`type` match {
                  case TType.STRING =>
                    result = readResultValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'result' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          result,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        result: String
      ): Args =
        new Args(
          result
        )
    
      def unapply(_item: Args): _root_.scala.Option[String] = _root_.scala.Some(_item.result)
    
    
      @inline private[thrift] def readResultValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeResultField(result_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(ResultField)
        writeResultValue(result_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeResultValue(result_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(result_item)
      }
    
    
    }
    
    class Args(
        val result: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product1[String]
      with ValidatingThriftStruct[Args]
      with java.io.Serializable
    {
      import Args._
    
      def this(
        result: String
      ) = this(
        result,
        Map.empty
      )
    
      def _1: String = result
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (result ne null) writeResultField(result, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        result: String = this.result,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          result,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.result
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ValidatingThriftStructCodec3[Args] = Args
    }

    type SuccessType = Unit
    
    object Result extends ValidatingThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("submitNumber_result")
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Result): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf.toList
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
      ): Result =
        new Result(
        )
    
      def unapply(_item: Result): Boolean = true
    
    
    
    }
    
    class Result(
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[Unit] with ThriftStruct
      with _root_.scala.Product
      with ValidatingThriftStruct[Result]
      with java.io.Serializable
    {
      import Result._
    
      def this(
      ) = this(
        Map.empty
      )
    
    
      def successField: Option[Unit] = Some(Unit)
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 0
    
      override def productElement(n: Int): Any = n match {
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ValidatingThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[Unit]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[Unit]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }


    val name: String = "submitNumber"
    val serviceName: String = "PiService"
    val argsCodec: Args.type = Args
    val responseCodec: Result.type = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val submitNumber$args: SubmitNumber.Args.type = SubmitNumber.Args
  type submitNumber$args = SubmitNumber.Args

  val submitNumber$result: SubmitNumber.Result.type = SubmitNumber.Result
  type submitNumber$result = SubmitNumber.Result

  object GetPI extends ThriftMethod {
    
    object Args extends ValidatingThriftStructCodec3[Args] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("getPI_args")
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Args): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf.toList
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Args = {
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
      ): Args =
        new Args(
        )
    
      def unapply(_item: Args): Boolean = true
    
    
    
    }
    
    class Args(
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with _root_.scala.Product
      with ValidatingThriftStruct[Args]
      with java.io.Serializable
    {
      import Args._
    
      def this(
      ) = this(
        Map.empty
      )
    
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      private def _equals(x: Args, y: Args): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Args])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 0
    
      override def productElement(n: Int): Any = n match {
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    
      def _codec: ValidatingThriftStructCodec3[Args] = Args
    }

    type SuccessType = String
    
    object Result extends ValidatingThriftStructCodec3[Result] {
      val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
      val Struct: TStruct = new TStruct("getPI_result")
      val SuccessField: TField = new TField("success", TType.STRING, 0)
      val SuccessFieldManifest: Manifest[String] = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String],
          None
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      /**
       * Checks that the struct is a valid as a new instance. If there are any missing required or
       * construction required fields, return a non-empty list.
       */
      def validateNewInstance(item: Result): scala.Seq[com.twitter.scrooge.validation.Issue] = {
        val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]
    
        buf ++= validateField(item.success)
        buf.toList
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                field
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[String] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRING =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[String] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[String]] = _root_.scala.Some(_item.success)
    
    
      @inline private[thrift] def readSuccessValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeSuccessField(success_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(success_item)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[String],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[String] with ThriftStruct
      with _root_.scala.Product1[Option[String]]
      with ValidatingThriftStruct[Result]
      with java.io.Serializable
    {
      import Result._
    
      def this(
        success: _root_.scala.Option[String] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1: _root_.scala.Option[String] = success
    
      def successField: Option[String] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[String] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      private def _equals(x: Result, y: Result): Boolean =
          x.productArity == y.productArity &&
          x.productIterator.sameElements(y.productIterator) &&
          x._passthroughFields == y._passthroughFields
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _equals(this, other.asInstanceOf[Result])
    
      override def hashCode: Int = {
        _root_.scala.runtime.ScalaRunTime._hashCode(this)
      }
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    
      def _codec: ValidatingThriftStructCodec3[Result] = Result
    }

    val annotations: immutable$Map[String, String] = immutable$Map.empty

    type FunctionType = Function1[Args,Future[String]]
    type ReqRepFunctionType = Function1[_root_.com.twitter.scrooge.Request[Args],Future[_root_.com.twitter.scrooge.Response[String]]]

    type ServiceIfaceServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[Args, SuccessType]
    type ReqRepServicePerEndpointServiceType = _root_.com.twitter.finagle.Service[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]]

    def toServiceIfaceService(f: FunctionType): ServiceIfaceServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toServicePerEndpointService(f: FunctionType): ServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk { args: Args =>
        f(args)
      }

    def toReqRepServicePerEndpointService(f: ReqRepFunctionType): ReqRepServicePerEndpointServiceType =
      _root_.com.twitter.finagle.Service.mk[_root_.com.twitter.scrooge.Request[Args], _root_.com.twitter.scrooge.Response[SuccessType]] { request: _root_.com.twitter.scrooge.Request[Args] =>
        f(request)
      }


    val name: String = "getPI"
    val serviceName: String = "PiService"
    val argsCodec: Args.type = Args
    val responseCodec: Result.type = Result
    val oneway: Boolean = false
  }

  // Compatibility aliases.
  val getPI$args: GetPI.Args.type = GetPI.Args
  type getPI$args = GetPI.Args

  val getPI$result: GetPI.Result.type = GetPI.Result
  type getPI$result = GetPI.Result


  trait MethodPerEndpoint
    extends PiService[Future] {
    
    def getNumber(): Future[Long]
    
    def submitNumber(result: String): Future[Unit]
    
    def getPI(): Future[String]
  }

  object MethodPerEndpoint {

    def apply(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint = {
      new MethodPerEndpointImpl(servicePerEndpoint) {}
    }

    /**
     * Use `MethodPerEndpoint.apply()` instead of this constructor.
     */
    class MethodPerEndpointImpl protected (servicePerEndpoint: ServicePerEndpoint)
      extends MethodPerEndpoint {
        def getNumber(): Future[Long] =
          servicePerEndpoint.getNumber(self.GetNumber.Args())
        def submitNumber(result: String): Future[Unit] =
          servicePerEndpoint.submitNumber(self.SubmitNumber.Args(result)).unit
        def getPI(): Future[String] =
          servicePerEndpoint.getPI(self.GetPI.Args())

        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
    }
  }

  object ReqRepMethodPerEndpoint {

    def apply(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      new ReqRepMethodPerEndpointImpl(servicePerEndpoint) { }

    /**
     * Use `ReqRepMethodPerEndpoint.apply()` instead of this constructor.
     */
    class ReqRepMethodPerEndpointImpl protected (servicePerEndpoint: ReqRepServicePerEndpoint)
      extends MethodPerEndpoint {

        def getNumber(): Future[Long] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.GetNumber.Args())
          servicePerEndpoint.getNumber(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }
        def submitNumber(result: String): Future[Unit] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.SubmitNumber.Args(result))
          servicePerEndpoint.submitNumber(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_)).unit
        }
        def getPI(): Future[String] = {
          val requestCtx = _root_.com.twitter.finagle.context.Contexts.local.getOrElse(_root_.com.twitter.finagle.thrift.Headers.Request.Key, () => _root_.com.twitter.finagle.thrift.Headers.Request.newValues)
          val scroogeRequest = _root_.com.twitter.scrooge.Request(requestCtx.values, self.GetPI.Args())
          servicePerEndpoint.getPI(scroogeRequest).transform(_root_.com.twitter.finagle.thrift.service.ThriftReqRepServicePerEndpoint.transformResult(_))
        }

        override def asClosable: _root_.com.twitter.util.Closable =
          servicePerEndpoint.asClosable
    }
  }

  @deprecated("Use MethodPerEndpoint", "2017-11-07")
  class MethodIface(serviceIface: BaseServiceIface)
    extends FutureIface {
    def getNumber(): Future[Long] =
      serviceIface.getNumber(self.GetNumber.Args())
    def submitNumber(result: String): Future[Unit] =
      serviceIface.submitNumber(self.SubmitNumber.Args(result)).unit
    def getPI(): Future[String] =
      serviceIface.getPI(self.GetPI.Args())
  }

  implicit object MethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.MethodPerEndpointBuilder[ServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint =
      MethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use MethodPerEndpointBuilder", "2018-01-12")
  implicit object ThriftServiceBuilder
    extends _root_.com.twitter.finagle.thrift.service.ThriftServiceBuilder[ServicePerEndpoint, PiService[Future]] {
    def build(servicePerEndpoint: ServicePerEndpoint): MethodPerEndpoint =
      MethodPerEndpoint(servicePerEndpoint)
  }

  implicit object ReqRepMethodPerEndpointBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepMethodPerEndpointBuilder[ReqRepServicePerEndpoint, MethodPerEndpoint] {
    def methodPerEndpoint(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      ReqRepMethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use ReqRepMethodPerEndpointBuilder", "2018-01-12")
  implicit object ReqRepThriftServiceBuilder
    extends _root_.com.twitter.finagle.thrift.service.ReqRepThriftServiceBuilder[ReqRepServicePerEndpoint, PiService[Future]] {
    def build(servicePerEndpoint: ReqRepServicePerEndpoint): MethodPerEndpoint =
      ReqRepMethodPerEndpoint(servicePerEndpoint)
  }

  @deprecated("Use MethodPerEndpointBuilder", "2017-11-07")
  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, PiService[Future]] {
    def newMethodIface(serviceIface: ServiceIface): MethodIface =
      new MethodIface(serviceIface)
  }

  @deprecated("Use MethodPerEndpoint", "2017-11-07")
  trait FutureIface
    extends PiService[Future] {
    
    def getNumber(): Future[Long]
    
    def submitNumber(result: String): Future[Unit]
    
    def getPI(): Future[String]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      clientParam: RichClientParam)
    extends PiService$FinagleClient(service, clientParam)
    with FutureIface
    with MethodPerEndpoint {

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "PiService",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver,
      responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats,
        responseClassifier = responseClassifier
      )
    )

    @deprecated("Use com.twitter.finagle.thrift.RichClientParam", "2017-08-16")
    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String,
      stats: com.twitter.finagle.stats.StatsReceiver
    ) = this(
      service,
      RichClientParam(
        protocolFactory,
        serviceName,
        clientStats = stats
      )
    )
  }

  class FinagledService(
      iface: PiService[Future],
      serverParam: RichServerParam)
    extends PiService$FinagleService(iface, serverParam) {

    @deprecated("Use com.twitter.finagle.thrift.RichServerParam", "2017-08-16")
    def this(
      iface: PiService[Future],
      protocolFactory: org.apache.thrift.protocol.TProtocolFactory,
      serviceName: String = "PiService"
    ) = this(iface, RichServerParam(protocolFactory, serviceName))
  }

  class Filter(serverParam: RichServerParam) {
    private[this] def protocolFactory: TProtocolFactory = serverParam.restrictedProtocolFactory

    private[this] def serviceName: String = serverParam.serviceName
    private[this] def responseClassifier: ctfs.ResponseClassifier = serverParam.responseClassifier
    private[this] def stats: StatsReceiver = serverParam.serverStats
    private[this] def perEndpointStats: Boolean = serverParam.perEndpointStats && !stats.isNull
    private[this] def maxReusableBufferSize: Int = serverParam.maxThriftBufferSize

    private[this] val tlReusableBuffer: TReusableBuffer = TReusableBuffer(maxThriftBufferSize = maxReusableBufferSize)

    private[thrift] def exception(name: String, seqid: Int, code: Int, message: String): Buf = {
      val x = new TApplicationException(code, message)
      val memoryBuffer = tlReusableBuffer.get()
      try {
        val oprot = protocolFactory.getProtocol(memoryBuffer)

        oprot.writeMessageBegin(new TMessage(name, TMessageType.EXCEPTION, seqid))
        x.write(oprot)
        oprot.writeMessageEnd()
        oprot.getTransport().flush()

        // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
        Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
      } finally {
        tlReusableBuffer.reset()
      }
    }

    private def reply(name: String, seqid: Int, result: ThriftStruct): Buf = {
      val memoryBuffer = tlReusableBuffer.get()
      try {
        val oprot = protocolFactory.getProtocol(memoryBuffer)
        val start = System.nanoTime
        oprot.writeMessageBegin(new TMessage(name, TMessageType.REPLY, seqid))
        result.write(oprot)
        oprot.writeMessageEnd()
        _root_.com.twitter.finagle.tracing.Trace.recordBinary("srv/response_serialization_ns", System.nanoTime - start)
        oprot.getTransport().flush()

        // make a copy of the array of bytes to construct a new buffer because memoryBuffer is reusable
        Buf.ByteArray.Shared(memoryBuffer.getArray(), 0, memoryBuffer.length())
      } finally {
        tlReusableBuffer.reset()
      }
    }

    private object ThriftMethodStats {
      def apply(stats: StatsReceiver): ThriftMethodStats =
        ThriftMethodStats(
          stats.counter("requests"),
          stats.counter("success"),
          stats.counter("failures"),
          stats.scope("failures")
        )
    }

    private case class ThriftMethodStats(
      requestsCounter: Counter,
      successCounter: Counter,
      failuresCounter: Counter,
      failuresScope: StatsReceiver
    )

    private def missingResult(name: String): TApplicationException = {
      new TApplicationException(
        TApplicationException.MISSING_RESULT,
        name + " failed: unknown result"
      )
    }

    private def setServiceName(ex: Throwable): Throwable =
      if (this.serviceName == "") ex
      else {
        ex match {
          case se: _root_.com.twitter.finagle.SourcedException =>
            se.serviceName = this.serviceName
            se
          case _ => ex
        }
      }

    private def recordRequest(method: ThriftMethod): Unit = {
      if (perEndpointStats) {
        val methodStats = ThriftMethodStats((if (serviceName != "") stats.scope(serviceName) else stats).scope(method.name))
        methodStats.requestsCounter.incr()
      }
    }

    private def recordResponse(reqRep: ctfs.ReqRep, method: ThriftMethod): Unit = {
      ServerToReqRep.setCtx(reqRep)
      if (perEndpointStats) {
        val methodStats = ThriftMethodStats((if (serviceName != "") stats.scope(serviceName) else stats).scope(method.name))
        val responseClass = responseClassifier.applyOrElse(reqRep, ctfs.ResponseClassifier.Default)
        responseClass match {
          case ctfs.ResponseClass.Successful(_) =>
            methodStats.successCounter.incr()
          case ctfs.ResponseClass.Failed(_) =>
            methodStats.failuresCounter.incr()
            reqRep.response match {
              case Throw(ex) =>
                methodStats.failuresScope.counter(Throwables.mkString(ex): _*).incr()
              case _ =>
            }
        }
      }
    }

    final protected def perMethodStatsFilter(
      method: ThriftMethod
    ): finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] = {
      new finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[method.Args, method.Result]] {
        def apply(
          req: (TProtocol, Int),
          service: finagle$Service[(TProtocol, Int), RichResponse[method.Args, method.Result]]
        ): Future[Array[Byte]] = {
          recordRequest(method)
          service(req).transform {
            case Return(value) =>
              value match {
                case SuccessfulResponse(args, _, result) =>
                  recordResponse(ctfs.ReqRep(args, _root_.com.twitter.util.Return(result.successField.get)), method)
                case ProtocolExceptionResponse(args, _, exp) =>
                  recordResponse(ctfs.ReqRep(args, _root_.com.twitter.util.Throw(exp)), method)
                case ThriftExceptionResponse(args, _, ex) =>
                  val rep = ex match {
                    case exp: ThriftException => setServiceName(exp)
                    case _ => missingResult(serviceName)
                  }
                  recordResponse(ctfs.ReqRep(args, _root_.com.twitter.util.Throw(rep)), method)
              }
              Future.value(Buf.ByteArray.Owned.extract(value.response))
            case t @ Throw(_) =>
              recordResponse(ctfs.ReqRep(req, t), method)
              Future.const(t.cast[Array[Byte]])
          }
        }
      }
    }
    // ---- end boilerplate.

    val getNumber: finagle$Filter[(TProtocol, Int), Array[Byte], GetNumber.Args, GetNumber.SuccessType] = {
      val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetNumber.Args, GetNumber.Result]] = perMethodStatsFilter(GetNumber)
    
      val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetNumber.Args, GetNumber.Result]] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[(TProtocol, Int), RichResponse[GetNumber.Args, GetNumber.Result]]
        ): Future[RichResponse[GetNumber.Args, GetNumber.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val res = service(request)
          res.transform {
            case _root_.com.twitter.util.Throw(e: TProtocolException) =>
              iprot.readMessageEnd()
              Future.value(
                ProtocolExceptionResponse(
                  null,
                  exception("getNumber", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                  new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
            case _ =>
              res
          }
        }
      }
    
      val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetNumber.Args, GetNumber.Result], GetNumber.Args, GetNumber.SuccessType] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[GetNumber.Args, GetNumber.SuccessType]
        ): Future[RichResponse[GetNumber.Args, GetNumber.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val start = System.nanoTime
          val args = GetNumber.Args.decode(iprot)
          iprot.readMessageEnd()
          _root_.com.twitter.finagle.tracing.Trace.recordBinary("srv/request_deserialization_ns", System.nanoTime - start)
          val res = _root_.com.twitter.finagle.context.Contexts.local.let(
            _root_.com.twitter.finagle.thrift.MethodMetadata.Key,
            _root_.com.twitter.finagle.thrift.MethodMetadata(GetNumber)) {
            service(args)
          }
          res.transform {
            case _root_.com.twitter.util.Return(value) =>
              val methodResult = GetNumber.Result(success = Some(value))
              Future.value(
                SuccessfulResponse(
                  args,
                  reply("getNumber", seqid, methodResult),
                  methodResult))
            case t @ _root_.com.twitter.util.Throw(_) =>
              Future.const(t.cast[RichResponse[GetNumber.Args, GetNumber.Result]])
          }
        }
      }
    
      statsFilter.andThen(protocolExnFilter).andThen(serdeFilter)
    }
    val submitNumber: finagle$Filter[(TProtocol, Int), Array[Byte], SubmitNumber.Args, SubmitNumber.SuccessType] = {
      val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[SubmitNumber.Args, SubmitNumber.Result]] = perMethodStatsFilter(SubmitNumber)
    
      val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[SubmitNumber.Args, SubmitNumber.Result]] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[(TProtocol, Int), RichResponse[SubmitNumber.Args, SubmitNumber.Result]]
        ): Future[RichResponse[SubmitNumber.Args, SubmitNumber.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val res = service(request)
          res.transform {
            case _root_.com.twitter.util.Throw(e: TProtocolException) =>
              iprot.readMessageEnd()
              Future.value(
                ProtocolExceptionResponse(
                  null,
                  exception("submitNumber", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                  new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
            case _ =>
              res
          }
        }
      }
    
      val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[SubmitNumber.Args, SubmitNumber.Result], SubmitNumber.Args, SubmitNumber.SuccessType] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[SubmitNumber.Args, SubmitNumber.SuccessType]
        ): Future[RichResponse[SubmitNumber.Args, SubmitNumber.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val start = System.nanoTime
          val args = SubmitNumber.Args.decode(iprot)
          iprot.readMessageEnd()
          _root_.com.twitter.finagle.tracing.Trace.recordBinary("srv/request_deserialization_ns", System.nanoTime - start)
          val res = _root_.com.twitter.finagle.context.Contexts.local.let(
            _root_.com.twitter.finagle.thrift.MethodMetadata.Key,
            _root_.com.twitter.finagle.thrift.MethodMetadata(SubmitNumber)) {
            service(args)
          }
          res.transform {
            case _root_.com.twitter.util.Return(value) =>
              val methodResult = SubmitNumber.Result()
              Future.value(
                SuccessfulResponse(
                  args,
                  reply("submitNumber", seqid, methodResult),
                  methodResult))
            case t @ _root_.com.twitter.util.Throw(_) =>
              Future.const(t.cast[RichResponse[SubmitNumber.Args, SubmitNumber.Result]])
          }
        }
      }
    
      statsFilter.andThen(protocolExnFilter).andThen(serdeFilter)
    }
    val getPI: finagle$Filter[(TProtocol, Int), Array[Byte], GetPI.Args, GetPI.SuccessType] = {
      val statsFilter: finagle$Filter[(TProtocol, Int), Array[Byte], (TProtocol, Int), RichResponse[GetPI.Args, GetPI.Result]] = perMethodStatsFilter(GetPI)
    
      val protocolExnFilter = new SimpleFilter[(TProtocol, Int), RichResponse[GetPI.Args, GetPI.Result]] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[(TProtocol, Int), RichResponse[GetPI.Args, GetPI.Result]]
        ): Future[RichResponse[GetPI.Args, GetPI.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val res = service(request)
          res.transform {
            case _root_.com.twitter.util.Throw(e: TProtocolException) =>
              iprot.readMessageEnd()
              Future.value(
                ProtocolExceptionResponse(
                  null,
                  exception("getPI", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage),
                  new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage)))
            case _ =>
              res
          }
        }
      }
    
      val serdeFilter = new finagle$Filter[(TProtocol, Int), RichResponse[GetPI.Args, GetPI.Result], GetPI.Args, GetPI.SuccessType] {
        def apply(
          request: (TProtocol, Int),
          service: _root_.com.twitter.finagle.Service[GetPI.Args, GetPI.SuccessType]
        ): Future[RichResponse[GetPI.Args, GetPI.Result]] = {
          val iprot = request._1
          val seqid = request._2
          val start = System.nanoTime
          val args = GetPI.Args.decode(iprot)
          iprot.readMessageEnd()
          _root_.com.twitter.finagle.tracing.Trace.recordBinary("srv/request_deserialization_ns", System.nanoTime - start)
          val res = _root_.com.twitter.finagle.context.Contexts.local.let(
            _root_.com.twitter.finagle.thrift.MethodMetadata.Key,
            _root_.com.twitter.finagle.thrift.MethodMetadata(GetPI)) {
            service(args)
          }
          res.transform {
            case _root_.com.twitter.util.Return(value) =>
              val methodResult = GetPI.Result(success = Some(value))
              Future.value(
                SuccessfulResponse(
                  args,
                  reply("getPI", seqid, methodResult),
                  methodResult))
            case t @ _root_.com.twitter.util.Throw(_) =>
              Future.const(t.cast[RichResponse[GetPI.Args, GetPI.Result]])
          }
        }
      }
    
      statsFilter.andThen(protocolExnFilter).andThen(serdeFilter)
    }
  }

}
